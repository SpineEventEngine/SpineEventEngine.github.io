/*
 * Copyright 2020, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This file describes shared dependencies of Spine sub-projects.
 *
 * Inspired by dependency management of the Uber's NullAway project:
 *  https://github.com/uber/NullAway/blob/master/gradle/dependencies.gradle
 */

// Repositories to which we may publish. Normally, only one repository will be used.
// See `publish.gradle` for details of the publishing process.

ext.publishingRepos = [

        mavenTeamDev: [
                releases    : 'http://maven.teamdev.com/repository/spine',
                snapshots   : 'http://maven.teamdev.com/repository/spine-snapshots',
                credentials : 'credentials.properties'
        ],

        cloudRepo: [
                releases    : 'https://spine.mycloudrepo.io/public/repositories/releases',
                snapshots   : 'https://spine.mycloudrepo.io/public/repositories/snapshots',
                credentials : 'cloudrepo.properties'
        ]
]

// Repository to publish artifacts into.
ext.publishToRepository = publishingRepos.cloudRepo

// Specific repositories.
ext.repos = [
        // Old Archiva Repositories
        //    spine             : "http://maven.teamdev.com/repository/spine",
        //    spineSnapshots    : "http://maven.teamdev.com/repository/spine-snapshots",
        oldSpine          : publishingRepos.mavenTeamDev.releases,
        oldSpineSnapshots : publishingRepos.mavenTeamDev.snapshots,

        // New CloudRepo Repositories
        spine             : publishingRepos.cloudRepo.releases,
        spineSnapshots    : publishingRepos.cloudRepo.snapshots,

        // Snapshots of Error Prone and Guava.
        sonatypeSnapshots : 'https://oss.sonatype.org/content/repositories/snapshots',

        gradlePlugins     : 'https://plugins.gradle.org/m2/'
]

final def versions = [
        slf4j            : '1.7.29', // deprecated, remove after full migration.
        checkerFramework : '3.3.0',
        errorProne       : '2.3.4',
        errorProneJavac  : '9+181-r4173-1', // taken from here: https://github.com/tbroyer/gradle-errorprone-plugin/blob/v0.8/build.gradle.kts
        errorPronePlugin : '1.1.1',
        pmd              : '6.20.0',
        checkstyle       : '8.29',
        protobufPlugin   : '0.8.12',
        appengineApi     : '1.9.79',
        appenginePlugin  : '2.2.0',
        findBugs         : '3.0.2',
        guava            : '29.0-jre',
        protobuf         : '3.11.4',
        grpc             : '1.28.1',
        flogger          : '0.5.1',
        junit4           : '4.12',
        junit5           : '5.6.2',
        junitPlatform    : '1.6.2',
        junitPioneer     : '0.4.2',
        truth            : '1.0.1',
        httpClient       : '1.34.2',
        apacheHttpClient : '2.1.2',
        firebaseAdmin    : '6.12.2',
        roaster          : '2.21.2.Final',
        licensePlugin    : '1.13',
        javaPoet         : '1.12.1',
        autoService      : '1.0-rc6',
        autoCommon       : '0.10',
        jackson          : '2.9.10.3',
        animalSniffer    : '1.18'
]

final def build = [
        errorProneJavac        : "com.google.errorprone:javac:$versions.errorProneJavac",
        errorProneAnnotations: [
                "com.google.errorprone:error_prone_annotations:$versions.errorProne",
                "com.google.errorprone:error_prone_type_annotations:$versions.errorProne"
        ],
        errorProneCheckApi     : "com.google.errorprone:error_prone_check_api:$versions.errorProne",
        errorProneCore         : "com.google.errorprone:error_prone_core:$versions.errorProne",
        errorProneTestHelpers  : "com.google.errorprone:error_prone_test_helpers:$versions.errorProne",

        checkerAnnotations     : "org.checkerframework:checker-qual:$versions.checkerFramework",
        checkerDataflow        : ["org.checkerframework:dataflow:$versions.checkerFramework",
                                  "org.checkerframework:javacutil:$versions.checkerFramework"],

        autoCommon             : "com.google.auto:auto-common:$versions.autoCommon",
        autoService            : [
                annotations : "com.google.auto.service:auto-service-annotations:$versions.autoService",
                processor   : "com.google.auto.service:auto-service:$versions.autoService"
        ],

        jsr305Annotations      : "com.google.code.findbugs:jsr305:$versions.findBugs",

        guava                  : "com.google.guava:guava:$versions.guava",
        flogger                : "com.google.flogger:flogger:$versions.flogger",
        slf4j                  : "org.slf4j:slf4j-api:$versions.slf4j",
        protobuf               : ["com.google.protobuf:protobuf-java:$versions.protobuf",
                                  "com.google.protobuf:protobuf-java-util:$versions.protobuf"],
        protoc                 : "com.google.protobuf:protoc:$versions.protobuf",
        googleHttpClient       : "com.google.http-client:google-http-client:$versions.httpClient",
        googleHttpClientApache : "com.google.http-client:google-http-client-apache:$versions.apacheHttpClient",
        appengineApi           : "com.google.appengine:appengine-api-1.0-sdk:$versions.appengineApi",

        firebaseAdmin          : "com.google.firebase:firebase-admin:$versions.firebaseAdmin",
        jacksonDatabind        : "com.fasterxml.jackson.core:jackson-databind:$versions.jackson",

        roasterApi             : "org.jboss.forge.roaster:roaster-api:$versions.roaster",
        roasterJdt             : "org.jboss.forge.roaster:roaster-jdt:$versions.roaster",
        animalSniffer          : "org.codehaus.mojo:animal-sniffer-annotations:$versions.animalSniffer",

        ci: 'true' == System.getenv('CI'),

        gradlePlugins: [
                errorProne      : "net.ltgt.gradle:gradle-errorprone-plugin:$versions.errorPronePlugin",
                protobuf        : "com.google.protobuf:protobuf-gradle-plugin:$versions.protobufPlugin",
                appengine       : "com.google.cloud.tools:appengine-gradle-plugin:$versions.appenginePlugin",
                licenseReport   : "com.github.jk1:gradle-license-report:$versions.licensePlugin"
        ]
]

final def gen = [
        javaPoet : "com.squareup:javapoet:$versions.javaPoet"
]

final def grpc = [
        grpcCore               : "io.grpc:grpc-core:$versions.grpc",
        grpcStub               : "io.grpc:grpc-stub:$versions.grpc",
        grpcOkHttp             : "io.grpc:grpc-okhttp:$versions.grpc",
        grpcProtobuf           : "io.grpc:grpc-protobuf:$versions.grpc",
        grpcNetty              : "io.grpc:grpc-netty:$versions.grpc",
        grpcNettyShaded        : "io.grpc:grpc-netty-shaded:$versions.grpc",
        grpcContext            : "io.grpc:grpc-context:$versions.grpc"
]

final def runtime = [
        floggerSystemBackend : "com.google.flogger:flogger-system-backend:$versions.flogger",
        floggerLog4J         : "com.google.flogger:flogger-log4j:$versions.flogger",
        floggerSlf4J         : "com.google.flogger:slf4j-backend-factory:$versions.flogger"
]

final def test = [
        junit4        : "junit:junit:$versions.junit4",
        junit5Api     : ["org.junit.jupiter:junit-jupiter-api:$versions.junit5",
                         "org.junit.jupiter:junit-jupiter-params:$versions.junit5",
                         'org.apiguardian:apiguardian-api:1.1.0'],
        junit5Runner  : "org.junit.jupiter:junit-jupiter-engine:$versions.junit5",
        junitPioneer  : "org.junit-pioneer:junit-pioneer:$versions.junitPioneer",
        slf4j         : "org.slf4j:slf4j-jdk14:$versions.slf4j",
        guavaTestlib  : "com.google.guava:guava-testlib:$versions.guava",
        mockito       : "org.mockito:mockito-core:2.12.0",
        hamcrest      : "org.hamcrest:hamcrest-all:1.3",
        truth         : ["com.google.truth:truth:$versions.truth",
                         "com.google.truth.extensions:truth-java8-extension:$versions.truth",
                         "com.google.truth.extensions:truth-proto-extension:$versions.truth"]
]

final def scripts = [
        testArtifacts          : "$rootDir/config/gradle/test-artifacts.gradle",
        testOutput             : "$rootDir/config/gradle/test-output.gradle",
        slowTests              : "$rootDir/config/gradle/slow-tests.gradle",
        javadocOptions         : "$rootDir/config/gradle/javadoc-options.gradle",
        filterInternalJavadocs : "$rootDir/config/gradle/filter-internal-javadoc.gradle",
        jacoco                 : "$rootDir/config/gradle/jacoco.gradle",
        publish                : "$rootDir/config/gradle/publish.gradle",
        publishProto           : "$rootDir/config/gradle/publish-proto.gradle",
        javacArgs              : "$rootDir/config/gradle/javac-args.gradle",
        jsBuildTasks           : "$rootDir/config/gradle/js/build-tasks.gradle",
        jsConfigureProto       : "$rootDir/config/gradle/js/configure-proto.gradle",
        npmPublishTasks        : "$rootDir/config/gradle/js/npm-publish-tasks.gradle",
        npmCli                 : "$rootDir/config/gradle/js/npm-cli.gradle",
        updatePackageVersion   : "$rootDir/config/gradle/js/update-package-version.gradle",
        dartBuildTasks         : "$rootDir/config/gradle/dart/build-tasks.gradle",
        pubPublishTasks        : "$rootDir/config/gradle/dart/pub-publish-tasks.gradle",
        pmd                    : "$rootDir/config/gradle/pmd.gradle",
        checkstyle             : "$rootDir/config/gradle/checkstyle.gradle",
        runBuild               : "$rootDir/config/gradle/run-build.gradle",
        modelCompiler          : "$rootDir/config/gradle/model-compiler.gradle",
        licenseReportCommon    : "$rootDir/config/gradle/license-report-common.gradle",
        projectLicenseReport   : "$rootDir/config/gradle/license-report-project.gradle",
        repoLicenseReport      : "$rootDir/config/gradle/license-report-repo.gradle",
        generatePom            : "$rootDir/config/gradle/generate-pom.gradle",
        updateGitHubPages      : "$rootDir/config/gradle/update-gh-pages.gradle"
]

ext.deps = [
        'build'    : build,
        'grpc'     : grpc,
        'gen'      : gen,
        'runtime'  : runtime,
        'test'     : test,
        'versions' : versions,
        'scripts'  : scripts,
]

/**
 * Forces default dependencies for the passed object which has {@code configurations} property.
 *
 * <p>Typically this should be applied to {@link ScriptHandler} (if in {@code buildscript} section),
 * or to {@link Project} (if in project definition section).
 */
ext.forceConfiguration = { final configurationContainer ->

    configurationContainer.configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
            cacheChangingModulesFor(0, 'seconds')
            force(
                    deps.build.slf4j,
                    deps.build.errorProneAnnotations,
                    deps.build.jsr305Annotations,
                    deps.build.checkerAnnotations,
                    deps.build.autoCommon,
                    deps.build.guava,
                    deps.build.animalSniffer,
                    deps.build.protobuf,
                    deps.test.guavaTestlib,
                    deps.test.truth,
                    deps.test.junit5Api,
                    deps.test.junit4,

                    // Transitive dependencies of 3rd party components that we don't use directly.
                    'com.google.code.gson:gson:2.8.6',
                    'com.google.j2objc:j2objc-annotations:1.3',
                    'org.codehaus.plexus:plexus-utils:3.3.0',
                    'com.squareup.okio:okio:1.17.5', // Last version before next major.
                    'commons-cli:commons-cli:1.4',

                    // Force discontinued transitive dependency until everybody migrates off it.
                    'org.checkerframework:checker-compat-qual:2.5.5',

                    'commons-logging:commons-logging:1.2',

                    // Force the Gradle Protobuf plugin version.
                    deps.build.gradlePlugins.protobuf
            )
        }
    }
}

/**
 * Adds default repositories to the passed object which has {@code repositories} property.
 *
 * <p>Typically this should be applied to {@link ScriptHandler} (if in {@code buildscript} section),
 * or to {@link Project} (if in project definition section).
 */
ext.defaultRepositories = { final repositoryContainer ->

    repositoryContainer.repositories {
        mavenLocal()
        maven {
            url = repos.spine
            content {
                includeGroup 'io.spine'
                includeGroup 'io.spine.tools'
                includeGroup 'io.spine.gcloud'
            }
            mavenContent {
                releasesOnly()
            }
        }
        jcenter()
        maven { url = repos.gradlePlugins }
    }
}
