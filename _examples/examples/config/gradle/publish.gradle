/*
 * Copyright 2020, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
  Apply this script to add ability to publish the needed artifacts.

  To publish more artifacts for a certain project, add them to the archives configuration:
  ```
  artifacts {
      archives myCustomJarTask
  }
  ```
 */

// See `dependencies.gradle` for the selection of the target repository.
final String credentialsPropertyFile = publishToRepository.credentials

String repositoryUserName = null
String repositoryUserPassword = null

final Properties properties = new Properties()
final File credentialsFile = project.file(credentialsPropertyFile)
if (credentialsFile.exists()) {
    logger.info("Using credentials from $credentialsFile.")
    properties.load(credentialsFile.newDataInputStream())
    repositoryUserName = properties.getProperty("user.name")
    repositoryUserPassword = properties.getProperty("user.password")
}

task checkPublishingCredentials {
    doLast {
        if (repositoryUserName == null || repositoryUserPassword == null) {
            logger.error("Credentials file `$credentialsFile` does not exist.")

            throw new InvalidUserDataException(
                    "Please set up valid credentials." +
                            " Credentials must be set in `${credentialsPropertyFile}` file in" +
                            " the project root."
            )
        }
        println "Publishing build as ${repositoryUserName}"
    }
}

task publish {
    doLast {
        // Keep the task for dynamic generation while publishing.
    }
}

void dependPublish(final project) {
    final credentialsTasks = getTasksByName("readPublishingCredentials", false)
    project.getTasksByName("publish", false).each { final task ->
        task.dependsOn credentialsTasks
    }
    publish.dependsOn project.getTasksByName("publish", false)
}

projectsToPublish.each {
    project(":$it") { final currentProject ->
        apply plugin: 'maven-publish'

        logger.debug("Applying `maven-publish` plugin to ${currentProject.name}.")

        currentProject.artifacts {
            archives sourceJar
            archives testOutputJar
            archives javadocJar
        }

        // Artifact IDs are composed as "spine-<project.name>". Example:
        //
        //      "spine-model-compiler"
        //
        // That helps to distinguish resulting JARs in the final assembly, such as WAR package.
        //
        final String artifactIdForPublishing = "spine-${currentProject.name}"

        final def publishingAction = {
            currentProject.publishing {
                publications {
                    mavenJava(MavenPublication) {
                        groupId = "${currentProject.group}"
                        artifactId = "${artifactIdForPublishing}"
                        version = "${currentProject.version}"

                        from components.java

                        artifacts = configurations.archives.allArtifacts
                    }
                }
            }
        }
        if (currentProject.state.executed) {
            publishingAction()
        } else {
            currentProject.afterEvaluate(publishingAction)
        }

        final boolean isSnapshots = currentProject.version.matches('.+-SNAPSHOT(\\+\\d+)?')

        publishing {
            repositories {
                maven {
                    final String publicRepo = (isSnapshots
                            ? publishToRepository.snapshots
                            : publishToRepository.releases
                    )

                    // Special treatment for CloudRepo URL.
                    // Reading is performed via public repositories, and publishing via private
                    // ones that differ in the `/public` infix.
                    final urlToPublish = publicRepo.replace("/public", "")

                    // Assign URL to the plugin property.
                    url = urlToPublish

                    credentials {
                        username = "${repositoryUserName}"
                        password = "${repositoryUserPassword}"
                    }
                }
            }
        }

        dependPublish(project)
    }
}
