/*
 * Copyright 2020, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This script configures Spine defaults for the Model Compiler code generation.
 *
 * Applies the following interfaces generation configurations:
 * — all messages in Protobuf files ending with "commands.proto" are marked as `CommandMessage`;
 * — all messages in Protobuf files ending with "events.proto" are marked as `EventMessage`;
 * — all messages in Protobuf files ending with "rejections.proto" are marked as `RejectionMessage`;
 * — all messages that qualify to be UUID messages are marked as `UuidValue`;
 * — all messages that represent the entity state are marked as `EntityState`.
 *
 * And the following method generations are applied:
 * — all messages that qualify to be UUID messages have helper `generate` and `of` methods
 *   generated using `UuidMethodFactory`;
 *
 * Be aware that the root project `buildscript` should already have a classpath
 * `io.spine.tools:spine-model-compiler:<version>` classpath dependency.
 */

modelCompiler {

    interfaces {
        mark messages().inFiles(suffix: "commands.proto"), asType("io.spine.base.CommandMessage")
        mark messages().inFiles(suffix: "events.proto"), asType("io.spine.base.EventMessage")
        mark messages().inFiles(suffix: "rejections.proto"), asType("io.spine.base.RejectionMessage")
        mark messages().uuid(), asType("io.spine.base.UuidValue")
        mark messages().entityState(), asType("io.spine.base.EntityState")
    }

    methods {
        applyFactory "io.spine.code.gen.java.UuidMethodFactory", messages().uuid()
    }

    columns {
        generate = true
    }

    fields {
        generateFor messages().inFiles(suffix: "events.proto"), markAs("io.spine.base.EventMessageField")
        generateFor messages().inFiles(suffix: "rejections.proto"), markAs("io.spine.base.EventMessageField")
        generateFor messages().entityState(), markAs("io.spine.base.EntityStateField")
    }
}
